Architecture Diagram

                                 +-------------------------+
                                 |      User Wallet        |
                                 |  (Naira/Fiat Payment)   |
                                 +-----------+-------------+
                                             |
                                             v
                           +--------------------------+
                           |    On-Ramp Provider      |
                           | (Naira ‚Üí USDC on Solana) |
                           +-----------+--------------+
                                       |
                                       v
                   +------------------------------------------+
                   |     ChickenVault Smart Contract (Solana) |
                   |  ‚Ä¢ Holds USDC until delivery is confirmed|
                   |  ‚Ä¢ Maps Order ID to Farmer‚Äôs Wallet      |
                   |  ‚Ä¢ Emits audit events                    |
                   +-----------+------------------------------+
                               |
             +----------------+-------------------+
             |                                    |
             v                                    v
+-------------------------+       +-------------------------------+
| Delivery Oracle System  |       |        Off-Ramp Provider      |
| (Delivery confirmation) |       | (USDC ‚Üí Naira to Farmer Bank) |
+-----------+-------------+       +-------------------------------+
            | 
            v
 +----------------------------+
 |   Trigger USDC release to |
 |   Farmer‚Äôs Solana wallet  |
 +----------------------------+


üìú PROTOCOL POC REQUIREMENTS FOR CHICKCHAIN
üîê Admin + Configuration
‚Ä¢ The protocol shall allow an admin wallet to set global config variables (vault timeout, oracle address, off-ramp limits).
‚Ä¢ The protocol shall allow the admin to pause or resume vault operations in case of an emergency.
üõí Order Creation & Vaulting
‚Ä¢ The protocol shall allow a user to initiate an order by paying in Naira through a third-party on-ramp service.
‚Ä¢ The protocol shall allow the system to receive USDC and associate it with a unique Order ID.
‚Ä¢ The protocol shall vault the received USDC and hold it pending delivery confirmation.
‚Ä¢ The protocol shall emit an on-chain event when vaulting is completed for transparency.
üöö Delivery & Oracle Confirmation
‚Ä¢ The protocol shall allow a designated oracle address or a multisig delivery authority to confirm delivery.
‚Ä¢ The protocol shall allow manual or automated oracles to change the status of an order from PENDING to DELIVERED.
üí∏ Fund Release & Settlement
‚Ä¢ The protocol shall allow the smart contract to release USDC from the vault to the farmer's wallet upon confirmation.
‚Ä¢ The protocol shall emit on-chain proof of USDC transfer (including order ID, timestamp, farmer wallet).
‚Ä¢ The protocol shall support multiple off-ramp providers for conversion of USDC to local fiat.
üîÑ Refund / Reversal Mechanism
‚Ä¢ The protocol shall allow users to reclaim funds if delivery is not confirmed within a set timeout (e.g., 72 hours).
‚Ä¢ The protocol shall return USDC to the original sender‚Äôs wallet or initiate off-ramp refund flow.
üìë Traceability & Auditing
‚Ä¢ The protocol shall store a hash of order metadata (e.g., chicken type, farm, timestamp) on-chain.
‚Ä¢ The protocol shall allow third-party platforms to query on-chain order status and history.
üí± Token Conversion & Pricing
‚Ä¢ The protocol shall interface with price oracles (e.g., Pyth) to verify current Naira‚ÄìUSDC rates.
‚Ä¢ The protocol shall allow dynamic token pricing to reflect real-time FX rates during purchase.
‚öôÔ∏è Instructions for Features Needed
üîß Smart Contract Features
1. createOrder(order_id, farmer_wallet, amount_usdc)
    ‚ó¶ Initialize vault and map order to farmer
    ‚ó¶ Store order metadata hash
2. confirmDelivery(order_id)
    ‚ó¶ Oracle confirms delivery ‚Üí updates status to DELIVERED
    ‚ó¶ Triggers USDC transfer to farmer wallet
3. releaseFunds(order_id)
    ‚ó¶ Executes transfer of funds to mapped farmer wallet if delivery confirmed
4. refundOrder(order_id)
    ‚ó¶ If timeout expires and delivery unconfirmed ‚Üí refund USDC to user
5. getOrderStatus(order_id)
    ‚ó¶ Return full status (vaulted, delivered, refunded, expired)
6. setOracleAddress(addr)
    ‚ó¶ Admin function to update delivery oracle address
7. setOffRampProvider(provider_id, status)
    ‚ó¶ Admin-controlled function to enable/disable specific off-ramp services
8. setTimeoutPeriod(seconds)
    ‚ó¶ Admin sets timeout for order confirmation window
üß™ Off-Chain Modules
‚Ä¢ Delivery Oracle Service
    ‚ó¶ GPS/QR triggered or manually submitted delivery verifications
    ‚ó¶ Pushes transaction to smart contract for delivery confirmation
‚Ä¢ On-Ramp API Wrapper
    ‚ó¶ Converts Naira to USDC and transfers to Solana vault
‚Ä¢ Off-Ramp API Wrapper
    ‚ó¶ After smart contract sends USDC to farmer, calls off-ramp API to auto-settle to bank account using pajcash
